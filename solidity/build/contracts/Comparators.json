{
  "contractName": "Comparators",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "test_stop",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "test_revert",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "test_invalid",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "testOpcodes",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"testOpcodes\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test_stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test_revert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test_invalid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/stephanie/chainsafe/attalus/solidity/contracts/comparators.sol\":\"Comparators\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/stephanie/chainsafe/attalus/solidity/contracts/Abstracts/TestContractInterface.sol\":{\"keccak256\":\"0x9a8001897ada7e0b3f948322b08b5f0d733c043570a445cf53ac23d58bf52dbc\",\"urls\":[\"bzzr://06097e06f5f60ea2e9b630e56d73436d7155fa659275ee0bac3fb6677cd991a3\"]},\"/home/stephanie/chainsafe/attalus/solidity/contracts/comparators.sol\":{\"keccak256\":\"0xfe5f10ab1051856654e4b865882203041bb89465a9548f06fd4ce67470a9d41c\",\"urls\":[\"bzzr://39b4f24cb0cd1527d3131e3019b6c7a22bf0dc3a03709c339d9375358fa35684\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060a28061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060465760003560e01c8063391521f414604b57806355313dea1460535780636d3d141614605b578063b9d1e5aa146063575b600080fd5b6051606b565b005b6059606d565b005b6061606f565b005b60696074565b005b565b005b600080fd5bfefea165627a7a723058206cc21a4ddffc84b63c20f01be3103ad02f291042e48bb14cdd0a4668edfe84610029",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060465760003560e01c8063391521f414604b57806355313dea1460535780636d3d141614605b578063b9d1e5aa146063575b600080fd5b6051606b565b005b6059606d565b005b6061606f565b005b60696074565b005b565b005b600080fd5bfefea165627a7a723058206cc21a4ddffc84b63c20f01be3103ad02f291042e48bb14cdd0a4668edfe84610029",
  "sourceMap": "247:516:9:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:516:9;;;;;;;",
  "deployedSourceMap": "247:516:9:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:516:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;298:462;;;:::i;:::-;;374:50:1;;;:::i;:::-;;252:58;;;:::i;:::-;;314:56;;;:::i;:::-;;298:462:9;343:412::o;374:50:1:-;414:6;252:58;304:1;301;294:12;314:56;357:9",
  "source": "pragma solidity <0.6.0;\n\nimport \"./Abstracts/TestContractInterface.sol\";\n\n//if any of these fail ya'll are fucked :'(\n/*\n* this contract deals with all the arithmetic opcodes that when popped off the stack\n* return either the solution, 1 ,or 0\n*/\ncontract Comparators is TestContractInterface {\n\n  function testOpcodes() public {\n\n    assembly{\n\n      // 1 if x < y, 0 otherwise\n      pop(lt(1,4))\n\n      // 1 if x > y, 0 otherwise\n      pop(gt(3,3))\n\n      //1 if x < y, 0 otherwise, for signed numbers in two’s complement\n      pop(slt(1,4))\n\n      //1 if x < y, 1 otherwise, for signed numbers in two’s complement\n      pop(sgt(3,3))\n\n      //1 if x == y, 0 otherwise\n      pop(eq(2,2))\n\n      //1 if x == 0, 0 otherwise\n      pop(iszero(1))\n\n    }\n\n  }\n\n}",
  "sourcePath": "/home/stephanie/chainsafe/attalus/solidity/contracts/comparators.sol",
  "ast": {
    "absolutePath": "/home/stephanie/chainsafe/attalus/solidity/contracts/comparators.sol",
    "exportedSymbols": {
      "Comparators": [
        302
      ]
    },
    "id": 303,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 293,
        "literals": [
          "solidity",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:9"
      },
      {
        "absolutePath": "/home/stephanie/chainsafe/attalus/solidity/contracts/Abstracts/TestContractInterface.sol",
        "file": "./Abstracts/TestContractInterface.sol",
        "id": 294,
        "nodeType": "ImportDirective",
        "scope": 303,
        "sourceUnit": 55,
        "src": "25:47:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 295,
              "name": "TestContractInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 54,
              "src": "271:21:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TestContractInterface_$54",
                "typeString": "contract TestContractInterface"
              }
            },
            "id": 296,
            "nodeType": "InheritanceSpecifier",
            "src": "271:21:9"
          }
        ],
        "contractDependencies": [
          54
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 302,
        "linearizedBaseContracts": [
          302,
          54
        ],
        "name": "Comparators",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 300,
              "nodeType": "Block",
              "src": "328:432:9",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 299,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    pop(lt(1, 4))\n    pop(gt(3, 3))\n    pop(slt(1, 4))\n    pop(sgt(3, 3))\n    pop(eq(2, 2))\n    pop(iszero(1))\n}",
                  "src": "335:420:9"
                }
              ]
            },
            "documentation": null,
            "id": 301,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testOpcodes",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 297,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "318:2:9"
            },
            "returnParameters": {
              "id": 298,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "328:0:9"
            },
            "scope": 302,
            "src": "298:462:9",
            "stateMutability": "nonpayable",
            "superFunction": 38,
            "visibility": "public"
          }
        ],
        "scope": 303,
        "src": "247:516:9"
      }
    ],
    "src": "0:763:9"
  },
  "legacyAST": {
    "absolutePath": "/home/stephanie/chainsafe/attalus/solidity/contracts/comparators.sol",
    "exportedSymbols": {
      "Comparators": [
        302
      ]
    },
    "id": 303,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 293,
        "literals": [
          "solidity",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:9"
      },
      {
        "absolutePath": "/home/stephanie/chainsafe/attalus/solidity/contracts/Abstracts/TestContractInterface.sol",
        "file": "./Abstracts/TestContractInterface.sol",
        "id": 294,
        "nodeType": "ImportDirective",
        "scope": 303,
        "sourceUnit": 55,
        "src": "25:47:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 295,
              "name": "TestContractInterface",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 54,
              "src": "271:21:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TestContractInterface_$54",
                "typeString": "contract TestContractInterface"
              }
            },
            "id": 296,
            "nodeType": "InheritanceSpecifier",
            "src": "271:21:9"
          }
        ],
        "contractDependencies": [
          54
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 302,
        "linearizedBaseContracts": [
          302,
          54
        ],
        "name": "Comparators",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 300,
              "nodeType": "Block",
              "src": "328:432:9",
              "statements": [
                {
                  "externalReferences": [],
                  "id": 299,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    pop(lt(1, 4))\n    pop(gt(3, 3))\n    pop(slt(1, 4))\n    pop(sgt(3, 3))\n    pop(eq(2, 2))\n    pop(iszero(1))\n}",
                  "src": "335:420:9"
                }
              ]
            },
            "documentation": null,
            "id": 301,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testOpcodes",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 297,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "318:2:9"
            },
            "returnParameters": {
              "id": 298,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "328:0:9"
            },
            "scope": 302,
            "src": "298:462:9",
            "stateMutability": "nonpayable",
            "superFunction": 38,
            "visibility": "public"
          }
        ],
        "scope": 303,
        "src": "247:516:9"
      }
    ],
    "src": "0:763:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-06-21T17:50:59.033Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}