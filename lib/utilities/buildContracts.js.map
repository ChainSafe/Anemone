{"version":3,"sources":["../../src/utilities/buildContracts.ts"],"names":["getSources","sourceDir","sources","contracts","fs","readdirSync","i","length","contractName","contractPath","path","resolve","lstatSync","isDirectory","deployContracts","mainWallet","buildPath","contractByteCodes","deployedAddresses","console","log","getAddress","txs","nonce","getTransactionCount","bytecodePath","contents","readFileSync","tx","value","gasLimit","config","maxGas","gasPrice","chainId","data","txResponse","sendTransaction","push","hash"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAGA;;;;AAIA,MAAMA,UAAU,GAAIC,SAAD,IAAe;AAEhC,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAGC,EAAE,CAACC,WAAH,CAAeJ,SAAf,CAAlB;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAME,YAAY,GAAGL,SAAS,CAACG,CAAD,CAA9B;AACA,UAAMG,YAAY,GAAGC,IAAI,CAACC,OAAL,CAAaV,SAAb,EAAwBO,YAAxB,CAArB;;AACA,QAAI,CAAEJ,EAAE,CAACQ,SAAH,CAAaH,YAAb,EAA2BI,WAA3B,EAAN,EAAgD;AAC9CX,MAAAA,OAAO,CAACM,YAAD,CAAP,GAAwBC,YAAxB;AACD;AACF;;AAED,SAAOP,OAAP;AACD,CAdD;AAiBA;;;;;;AAIA,MAAMY,eAAe,GAAG,MAAOC,UAAP,IAAsB;AAE5C,QAAMC,SAAS,GAAGN,IAAI,CAACC,OAAL,CAAa,UAAb,EAAyB,OAAzB,EAAkC,WAAlC,CAAlB;AACA,QAAMM,iBAAiB,GAAGjB,UAAU,CAACgB,SAAD,CAApC;AACA,QAAME,iBAAiB,GAAG,EAA1B;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,qCAAoC,MAAML,UAAU,CAACM,UAAX,EAAwB,EAA/E;AAEA,QAAMC,GAAQ,GAAG,EAAjB;AACA,MAAIC,KAAK,GAAG,MAAMR,UAAU,CAACS,mBAAX,EAAlB;;AAEA,OAAK,IAAIC,YAAT,IAAyBR,iBAAzB,EAA2C;AACzC,QAAIS,QAAQ,GAAGtB,EAAE,CAACuB,YAAH,CAAgBjB,IAAI,CAACC,OAAL,CAAaK,SAAb,EAAwBS,YAAxB,CAAhB,CAAf;AACA,UAAMG,EAAE,GAAG;AACTL,MAAAA,KAAK,EAAEA,KADE;AAETM,MAAAA,KAAK,EAAE,CAFE;AAGTC,MAAAA,QAAQ,EAAE,oBAAGC,gBAAOC,MAAV,CAHD;AAITC,MAAAA,QAAQ,EAAE,2BAAUF,gBAAOE,QAAjB,CAJD;AAKTC,MAAAA,OAAO,EAAEH,gBAAOG,OALP;AAMTC,MAAAA,IAAI,EAAET;AANG,KAAX;AAQA,UAAMU,UAAU,GAAG,MAAMrB,UAAU,CAACsB,eAAX,CAA2BT,EAA3B,CAAzB;AACAN,IAAAA,GAAG,CAACgB,IAAJ,CAASF,UAAU,CAACG,IAApB;AACAhB,IAAAA,KAAK,IAAI,CAAT;AACD;;AAED,SAAOD,GAAP;AAED,CA5BD","sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs-extra';\nimport * as ethers from 'ethers';\nimport config from \"../config\";\nimport {bn, parseGwei} from \"./conversion\";\n\n\n/*\n* Gets path to all sources within a directory in the form of a dictionary\n* where the key references the name of the file, and the value is the file's path\n*/\nconst getSources = (sourceDir) => {\n\n  const sources = {};\n  const contracts = fs.readdirSync(sourceDir);\n\n  for (let i = 0; i < contracts.length; i++) {\n    const contractName = contracts[i];\n    const contractPath = path.resolve(sourceDir, contractName);\n    if (!(fs.lstatSync(contractPath).isDirectory())){\n      sources[contractName] = contractPath;\n    }\n  }\n\n  return sources;\n};\n\n\n/*\n* Deploys all the contract bytecode in the build folder from the wallet \n* with private key config.funderPrivateKey\n*/\nconst deployContracts = async (mainWallet) => {\n\n  const buildPath = path.resolve('solidity', 'build', 'contracts');\n  const contractByteCodes = getSources(buildPath);\n  const deployedAddresses = {};\n\n  console.log(`Deploying contracts from address: ${await mainWallet.getAddress()}`);\n\n  const txs: any = [];\n  let nonce = await mainWallet.getTransactionCount();\n\n  for (let bytecodePath in contractByteCodes){\n    let contents = fs.readFileSync(path.resolve(buildPath, bytecodePath));\n    const tx = {\n      nonce: nonce,\n      value: 0,\n      gasLimit: bn(config.maxGas),\n      gasPrice: parseGwei(config.gasPrice),\n      chainId: config.chainId,\n      data: contents\n    };\n    const txResponse = await mainWallet.sendTransaction(tx);\n    txs.push(txResponse.hash);\n    nonce += 1;\n  }\n\n  return txs;\n\n};\n\nexport {\n  deployContracts\n};\n"],"file":"buildContracts.js"}