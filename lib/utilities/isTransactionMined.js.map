{"version":3,"sources":["../../src/utilities/isTransactionMined.ts"],"names":["TransactionsMined","txHashes","interval","provider","Promise","resolve","blockNums","i","length","transactionRecieptExist","console","log","txHash","txResponse","getTransaction","blockNumber","setTimeout","temp"],"mappings":";;;;;;;AAEA;;;AAGA,MAAMA,iBAAiB,GAAG,OACxBC,QADwB,EAExBC,QAFwB,EAGxBC,QAHwB,KAIN;AAClB,SAAO,IAAIC,OAAJ,CAAY,MAAMC,OAAN,IAAiB;AAClC,QAAIC,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACO,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCD,MAAAA,SAAS,CAACC,CAAD,CAAT,GAAeE,uBAAuB,CAACR,QAAQ,CAACM,CAAD,CAAT,EAAcL,QAAd,EAAwBC,QAAxB,CAAtC;AACD;;AAED,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACO,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,YAAMD,SAAS,CAACC,CAAD,CAAf;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BV,QAAQ,CAACM,CAAD,CAAI,GAArD;AACD;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAa,IAAb;AAEAN,IAAAA,OAAO;AACR,GAbM,CAAP;AAcD,CAnBD;AAqBA;;;;;;;;AAIA,MAAMI,uBAAuB,GAAG,OAC9BG,MAD8B,EAE9BV,QAF8B,EAG9BC,QAH8B,KAI3B;AACH,QAAMU,UAAU,GAAG,MAAMV,QAAQ,CAACW,cAAT,CAAwBF,MAAxB,CAAzB;AACA,SAAO,IAAIR,OAAJ,CAAYC,OAAO,IAAI;AAC5B,QAAIQ,UAAU,CAACE,WAAX,IAA0B,IAA9B,EAAoC;AAClCC,MAAAA,UAAU,CAAC,kBAAiB;AAC1B,cAAMC,IAAI,GAAG,MAAMR,uBAAuB,CAACG,MAAD,EAASV,QAAT,EAAmBC,QAAnB,CAA1C;AACAE,QAAAA,OAAO,CAACY,IAAD,CAAP;AACD,OAHS,EAGPf,QAHO,CAAV;AAID,KALD,MAKO;AACLG,MAAAA,OAAO,CAACQ,UAAU,CAACE,WAAZ,CAAP;AACD;AACF,GATM,CAAP;AAUD,CAhBD","sourcesContent":["import {JsonRpcProvider} from \"ethers/providers\";\n\n/*\n* calls transactionRecieptExist for every transaction hash in array txHashes\n*/\nconst TransactionsMined = async (\n  txHashes: string[],\n  interval: number,\n  provider: JsonRpcProvider\n): Promise<void> => {\n  return new Promise(async resolve => {\n    let blockNums = [];\n    for (let i = 0; i < txHashes.length; i++) {\n      blockNums[i] = transactionRecieptExist(txHashes[i], interval, provider);\n    }\n\n    for (let i = 0; i < txHashes.length; i++) {\n      await blockNums[i];\n      console.log(`transaction mined! (hash: ${txHashes[i]})`);\n    }\n    console.log(`\\n`);\n\n    resolve();\n  });\n};\n\n/*\n* Continuously polls provider every interval miliseconds until the transaction\n* with transaction hash txHash is mined.\n*/\nconst transactionRecieptExist = async (\n  txHash: string,\n  interval: number,\n  provider: JsonRpcProvider\n) => {\n  const txResponse = await provider.getTransaction(txHash);\n  return new Promise(resolve => {\n    if (txResponse.blockNumber == null) {\n      setTimeout(async function() {\n        const temp = await transactionRecieptExist(txHash, interval, provider);\n        resolve(temp);\n      }, interval);\n    } else {\n      resolve(txResponse.blockNumber);\n    }\n  });\n};\n\nexport {TransactionsMined};\n"],"file":"isTransactionMined.js"}