{"version":3,"sources":["../src/attalus.ts"],"names":["connect","url","ethers","providers","JsonRpcProvider","generateWallets","num","wallets","i","wallet","Wallet","createRandom","push","address","getAddress","console","log","fundWallets","mainWallet","numTransactions","config","numWallets","transactionAmount","amount","mul","maxGasAmount","utils","parseUnits","gasPrice","maxGas","add","txHashes","length","nonce","getTransactionCount","dest","tx","value","to","gasLimit","chainId","txResponse","sendTransaction","hash","batchTxs","provider","Math","ceil","txs","sender","privateKey","j","destIndex","floor","random","testOpcodes","contractAddresses","txResponses","data"],"mappings":"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","sourcesContent":["import ethers, {Wallet} from \"ethers\";\nimport {JsonRpcProvider} from \"ethers/providers\";\n\nimport config from \"./config\";\nimport {bn, parseGwei} from \"./utilities/conversion\";\n\nconst connect = (url: string): JsonRpcProvider => {\n  return new ethers.providers.JsonRpcProvider(url, \"\");\n};\n\n/*\n* Generates num wallets\n*/\nconst generateWallets = async (num: number) => {\n  const wallets = [];\n  for (let i = 0; i < num; i++) {\n    const wallet: Wallet = ethers.Wallet.createRandom();\n    wallets.push(wallet);\n    const address = await wallet.getAddress();\n    console.log(`Created wallet with address ${address}`);\n    \n  }\n  console.log('\\n');\n  return wallets;\n};\n\n\n/*\n* Funds wallets in array wallets with mainWallet\n*/\nconst fundWallets = async (wallets: any[], mainWallet: any): Promise<string[]> => {\n  //send each wa]llet the max possible gas amount for each transaction + the amount of the transaction as specified in config\n  const numTransactions = bn(config.numTransactions/config.numWallets);\n  const transactionAmount = bn(config.amount).mul(numTransactions);\n  const maxGasAmount = (bn(ethers.utils.parseUnits(config.gasPrice, \"gwei\")).mul(bn(config.maxGas))).mul(numTransactions);\n  const amount = transactionAmount.add(maxGasAmount);\n\n  const txHashes: string[] = [];\n  const numWallets = wallets.length;\n  let nonce = await mainWallet.getTransactionCount();\n  for (let i = 0; i < numWallets; i++) {\n    const dest = await wallets[i].getAddress();\n    const tx = {\n      nonce: nonce,\n      value: amount,\n      to: dest,\n      gasLimit: bn(config.maxGas),\n      gasPrice: parseGwei(config.gasPrice),\n      chainId: config.chainId\n    };\n    const txResponse = await mainWallet.sendTransaction(tx);\n    console.log(`sent transaction to fund address ${dest}`);\n    txHashes.push(txResponse.hash);\n    nonce += 1;\n  }\n  console.log(`\\n`);\n\n  return txHashes;\n\n};\n\n/*\n* Creates and broadcasts batches of transactions from wallets in array wallets to provider\n*/\nconst batchTxs = async (wallets: any[], provider: JsonRpcProvider) => {\n  //we want to split the transactions equally among the wallets to be sent from.\n  const numTransactions = Math.ceil(config.numTransactions/config.numWallets);\n  const amount = bn(config.amount);\n  const txs: any = [];\n  const numWallets = wallets.length; \n  console.log(\"Broadcasting transactions...\"); \n  for (let i = 0; i < wallets.length; i++) {\n    const sender: Wallet = new ethers.Wallet(wallets[i].privateKey, provider);\n\n    let nonce = 0;\n    for (let j = 0; j < numTransactions; j++) {\n      //\"randomly\" select wallet among created wallets to receive transaction\n      const destIndex = Math.floor(Math.random() * (numWallets));\n      const dest = await wallets[destIndex].getAddress();\n      const tx = {\n\t      nonce: nonce,\n        value: amount,\n        to: dest,\n        gasLimit: bn(config.maxGas),\n        gasPrice: parseGwei(config.gasPrice),\n        chainId: config.chainId,\n      };\n      nonce += 1;\n      sender.sendTransaction(tx);\n      txs.push(tx); \n    }\n  }\n  console.log(`\\nCreated and broadcasted ${txs.length} transactions.`);\n  return txs;\n};\n\n/*\n* Broadcasts transactions from mainWallet to provider to call testOpcodes() at all known deployed contract addresses\n*/\nconst testOpcodes = async (provider: JsonRpcProvider, contractAddresses: any[], mainWallet) => {\n\n  let nonce = await mainWallet.getTransactionCount();\n  let txResponses = [];\n  console.log(\"calling testOpcodes...\");\n\t\n  for (let i = 0; i < contractAddresses.length; i++){\n    const tx = {\n      nonce: nonce,\n      to: contractAddresses[i],\n      value: 0,\n      gasLimit: bn(config.maxGas),\n      gasPrice: parseGwei(config.gasPrice),\n      chainId: config.chainId,\n      //ABI for all contracts is the same, testOpcodes is 0x391521f4\n      data: \"0x391521f4\"\n    };\n    const txResponse = await mainWallet.sendTransaction(tx);\n    txResponses.push(txResponse.hash);\n    nonce += 1;\n  }\n\n  return txResponses;\n};\n\nexport {\n  connect,\n  generateWallets,\n  fundWallets,\n  batchTxs,\n  testOpcodes\n};\n"],"file":"attalus.js"}