{"version":3,"sources":["../src/index.ts"],"names":["Main","provider","config","rpcUrl","numWallets","mainWallet","ethers","Wallet","funderPrivateKey","wallets","txHashes","testOpCodes","deployedContracts","addresses","i","length","h","a","getTransaction","push","responses","console","log","then","catch","err"],"mappings":";;;;;;;;;AAAA;;AAGA;;AACA;;AACA;;AAEA;;AALA;AAOO,MAAMA,IAAI,GAAG,YAAY;AAC9B;AACA,QAAMC,QAAyB,GAAG,sBAAQC,gBAAOC,MAAf,CAAlC,CAF8B,CAI9B;;AACA,QAAMC,UAAkB,GAAGF,gBAAOE,UAAlC,CAL8B,CAO9B;;AACA,QAAMC,UAAU,GAAG,IAAIC,gBAAOC,MAAX,CAAkBL,gBAAOM,gBAAzB,EAA2CP,QAA3C,CAAnB;AACA,QAAMQ,OAAO,GAAG,MAAM,8BAAgBL,UAAhB,CAAtB,CAT8B,CAW9B;;AACA,QAAMM,QAAkB,GAAG,MAAM,0BAAYD,OAAZ,EAAqBJ,UAArB,CAAjC,CAZ8B,CAc9B;;AACA,QAAM,2CAAkBK,QAAlB,EAA4B,GAA5B,EAAiCT,QAAjC,CAAN,CAf8B,CAiB9B;;AACA,QAAM,uBAASQ,OAAT,EAAkBR,QAAlB,CAAN;;AAEA,MAAIC,gBAAOS,WAAX,EAAuB;AAErB;AACA,UAAMC,iBAAiB,GAAG,MAAM,qCAAgBP,UAAhB,CAAhC,CAHqB,CAKrB;;AACA,UAAM,2CAAkBO,iBAAlB,EAAqC,GAArC,EAA0CX,QAA1C,CAAN,CANqB,CAQrB;;AACA,QAAIY,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAEF,iBAAiB,CAACG,MAArC,EAA6CD,CAAC,EAA9C,EAAiD;AAC/C,UAAIE,CAAC,GAAGJ,iBAAiB,CAACE,CAAD,CAAzB;AACA,UAAIG,CAAC,GAAG,MAAMhB,QAAQ,CAACiB,cAAT,CAAwBF,CAAxB,CAAd;AACAH,MAAAA,SAAS,CAACM,IAAV,CAAeF,CAAC,CAAC,SAAD,CAAhB;AACD,KAdoB,CAgBrB;;;AACA,QAAIG,SAAS,GAAG,MAAM,0BAAYnB,QAAZ,EAAsBY,SAAtB,EAAiCR,UAAjC,CAAtB;AAEA,UAAM,2CAAkBe,SAAlB,EAA6B,GAA7B,EAAkCnB,QAAlC,CAAN,CAnBqB,CAqBrB;;AACA,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAEM,SAAS,CAACL,MAA7B,EAAqCD,CAAC,EAAtC,EAAyC;AACvC,UAAIE,CAAC,GAAGI,SAAS,CAACN,CAAD,CAAjB;AACA,UAAIG,CAAC,GAAG,MAAMhB,QAAQ,CAACiB,cAAT,CAAwBF,CAAxB,CAAd;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYL,CAAZ;AACD;AAEF;AAEF,CAlDM;;;AAoDPjB,IAAI,GACDuB,IADH,CACQ,MAAM;AAAEF,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AAAiD,CADjE,EAEGE,KAFH,CAEUC,GAAD,IAAc;AAAEJ,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CG,GAA9C;AAAoD,CAF7E","sourcesContent":["import ethers from \"ethers\";\n\n// Relative Imports\nimport config from \"./config\";\nimport {connect, generateWallets, fundWallets, batchTxs, testOpcodes} from \"./attalus\";\nimport {TransactionsMined} from \"./utilities/isTransactionMined\";\nimport {JsonRpcProvider} from 'ethers/providers';\nimport {deployContracts} from \"./utilities/buildContracts\";\n\nexport const Main = async () => {\n  // Provider\n  const provider: JsonRpcProvider = connect(config.rpcUrl);\n\n  // Constants\n  const numWallets: number = config.numWallets;\n\n  // Setup wallets\n  const mainWallet = new ethers.Wallet(config.funderPrivateKey, provider);\n  const wallets = await generateWallets(numWallets);\n\n  // Send fuel to subwallets\n  const txHashes: string[] = await fundWallets(wallets, mainWallet);\n\n  // Wait for Transactions fueling subwallets to be mined\n  await TransactionsMined(txHashes, 500, provider);\n\n  // Create and send transactions as specified in config\n  await batchTxs(wallets, provider);\n\n  if (config.testOpCodes){\n\n    // Deploy contracts from mainWallet\n    const deployedContracts = await deployContracts(mainWallet);\n    \n    // Wait for transactions to be mined\n    await TransactionsMined(deployedContracts, 500, provider);  \n\n    //workaround for transactionresponse objects not having value \"create\"\n    let addresses = [];\n    for (let i = 0; i< deployedContracts.length; i++){\n      let h = deployedContracts[i];\n      let a = await provider.getTransaction(h);\n      addresses.push(a[\"creates\"]);\n    }\n\n    //call testOpcodes for each deployed contract\n    let responses = await testOpcodes(provider, addresses, mainWallet);\n\n    await TransactionsMined(responses, 500, provider);\n\n    // Log transaction reciepts\n    for (let i = 0; i< responses.length; i++){\n      let h = responses[i];\n      let a = await provider.getTransaction(h);\n      console.log(a);\n    }\n\n  }\n\n};\n\nMain()\n  .then(() => { console.log(\"attalus executed without errors!\");})\n  .catch((err: any) => { console.log(\"attalus executed with errors: \", err);});"],"file":"index.js"}